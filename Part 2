double calculate_mean(double* data, int n) {
    double sum = 0.0;
    for (int i = 0; i < n; i++) {
        sum += data[i];
    }
    return sum / n;
}

double calculate_std_dev(double* data, int n, double mean) {
    double sum_squared_diff = 0.0;
    for (int i = 0; i < n; i++) {
        double diff = data[i] - mean;
        sum_squared_diff += diff * diff;
    }
    return sqrt(sum_squared_diff / (n - 1));
}

void calculate_statistics_from_file(const char* filename, int N) {
    FILE* file = fopen(filename, "r");
    if (!file) {
        fprintf(stderr, "Error: Could not open file '%s' for reading.\n", filename);
        return;
    }

    double* data = (double*)malloc(N * sizeof(double));
    if (!data) {
        fprintf(stderr, "Error: Memory allocation failed.\n");
        fclose(file);
        return;
    }

    int count = 0;
    while (count < N && fscanf(file, "%lf", &data[count]) == 1) {
        count++;
    }

    if (count < N) {
        fprintf(stderr, "Warning: Expected %d numbers but only found %d in '%s'.\n", N, count, filename);
    }

    double mean = calculate_mean(data, count);
    double std_dev = calculate_std_dev(data, count, mean);

    printf("File: %s\n", filename);
    printf("Sample Mean: %.6f\n", mean);
    printf("Sample Standard Deviation: %.6f\n\n", std_dev);

    free(data);
    fclose(file);
}
// Add this function to the main part the program
void process_statistics_for_scenario(int scenario_num, double m, double M, int N) {
    char filepath[256];
    const char* types[] = {
        "uniform_integers",
        "uniform_real",
        "normal_integer",
        "normal_real",
        "truncated_normal_integer",
        "truncated_normal_real"
    };

    for (int i = 0; i < 6; i++) {
        sprintf(filepath, "DATA/Scenario%d/%s.txt", scenario_num, types[i]);
        calculate_statistics_from_file(filepath, N);



// Main Program Statistics Section
for (int i = 0; i < 3; i++) 
{
      printf("\nProcessing statistics for Scenario %d:\n", i + 1);
      process_statistics_for_scenario(
          i + 1,
          scenarios[i][2],
          scenarios[i][3],
          (int)scenarios[i][4]
      );
}
