#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void calculate_statistics_from_file(const char* filename, int N) {
    FILE* file = fopen(filename, "r");
    if (!file) {
        fprintf(stderr, "Error: Could not open file '%s' for reading.\n", filename);
        return;
    }

    double* data = (double*)malloc(N * sizeof(double));
    if (!data) {
        fprintf(stderr, "Error: Memory allocation failed.\n");
        fclose(file);
        return;
    }

    int count = 0;
    while (count < N && fscanf(file, "%lf", &data[count]) == 1) {
        count++;
    }

    if (count < N) {
        fprintf(stderr, "Warning: Expected %d numbers but only found %d in '%s'.\n", N, count, filename);
    }

    double sum = 0.0;
    for (int i = 0; i < count; i++) {
        sum += data[i];
    }
    double mean = sum / count;

    double sum_squared_diff = 0.0;
    for (int i = 0; i < count; i++) {
        double diff = data[i] - mean;
        sum_squared_diff += diff * diff;
    }
    double std_dev = sqrt(sum_squared_diff / (count - 1));

    printf("File: %s\n", filename);
    printf("Sample Mean: %.6f\n", mean);
    printf("Sample Standard Deviation: %.6f\n\n", std_dev);

    free(data);
    fclose(file);
}

int main() {
    srand(time(NULL));

    double scenarios[3][5] = {
        {5, 1, 1, 8, 20},
        {pow(2, 10), pow(2, 8), 1, 2000, 200000},
        {pow(2, 12), 1.3 * pow(2, 10), 1, 8100, 2000000}
    };

    for (int i = 0; i < 3; i++) {
        printf("\nProcessing statistics for Scenario %d:\n", i + 1);
        char filepath[256];
        const char* types[] = {
            "uniform_integers",
            "uniform_real",
            "normal_integer",
            "normal_real",
            "truncated_normal_integer",
            "truncated_normal_real"
        };

        for (int j = 0; j < 6; j++) {
            sprintf(filepath, "DATA/Scenario%d/%s.txt", i + 1, types[j]);
            calculate_statistics_from_file(filepath, (int)scenarios[i][4]);
        }
    }

    return 0;
}
